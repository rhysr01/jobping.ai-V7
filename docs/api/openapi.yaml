openapi: 3.0.3
info:
  title: JobPing API
  description: |
    JobPing is a sophisticated job matching platform for early-career professionals.
    This API provides comprehensive job matching, user management, and analytics capabilities.
    
    ## Key Features
    - AI-powered job matching with GPT-4
    - Rule-based fallback matching
    - Real-time job scraping from multiple sources
    - User preference management
    - Email automation and notifications
    - Payment processing with Stripe
    - Comprehensive analytics and monitoring
    
    ## Authentication
    Most endpoints require authentication via JWT tokens or API keys.
    Public endpoints are clearly marked.
    
    ## Rate Limiting
    API requests are rate-limited per endpoint to ensure fair usage:
    - Public endpoints: 20 requests/minute
    - Authenticated endpoints: 100 requests/minute
    - Resource-intensive endpoints: 2-5 requests/minute
    
    ## Error Handling
    All errors follow a consistent format with appropriate HTTP status codes.
    See the Error Response schema for details.
  version: 1.0.0
  contact:
    name: JobPing Support
    email: support@jobping.ai
    url: https://jobping.ai/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://jobping.ai/api
    description: Production server
  - url: https://staging.jobping.ai/api
    description: Staging server
  - url: http://localhost:3000/api
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Job Matching
    description: AI-powered job matching and recommendations
  - name: User Management
    description: User profiles and preferences
  - name: Job Scraping
    description: Real-time job data collection
  - name: Email Automation
    description: Email notifications and campaigns
  - name: Payments
    description: Subscription and billing management
  - name: Analytics
    description: Usage analytics and monitoring
  - name: Webhooks
    description: External service integrations

paths:
  /health:
    get:
      tags:
        - Analytics
      summary: Health Check
      description: Returns the current health status of the API
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                  version:
                    type: string
                    example: "1.0.0"
                  uptime:
                    type: number
                    example: 86400
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "healthy"
                      redis:
                        type: string
                        example: "healthy"
                      openai:
                        type: string
                        example: "healthy"

  /match-users:
    post:
      tags:
        - Job Matching
      summary: Match Users with Jobs
      description: |
        Performs AI-powered job matching for multiple users. This is the core matching endpoint
        that combines AI analysis with rule-based filtering to provide highly accurate job recommendations.
        
        **Performance**: Typically processes 50-150 users in 30-60 seconds
        **Rate Limit**: 3 requests per 4 minutes (resource-intensive)
      operationId: matchUsers
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                limit:
                  type: integer
                  minimum: 1
                  maximum: 200
                  default: 50
                  description: Maximum number of users to process
                forceReprocess:
                  type: boolean
                  default: false
                  description: Force reprocessing even if recent matches exist
                enableAI:
                  type: boolean
                  default: true
                  description: Enable AI-powered matching
                enableFallback:
                  type: boolean
                  default: true
                  description: Enable rule-based fallback matching
              example:
                limit: 50
                forceReprocess: false
                enableAI: true
                enableFallback: true
      responses:
        '200':
          description: Matching completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  processedUsers:
                    type: integer
                    example: 45
                  totalMatches:
                    type: integer
                    example: 234
                  aiMatches:
                    type: integer
                    example: 156
                  ruleBasedMatches:
                    type: integer
                    example: 78
                  processingTime:
                    type: number
                    example: 45.2
                  cost:
                    type: number
                    example: 2.34
                  cacheHitRate:
                    type: number
                    example: 0.68
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                        error:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /send-scheduled-emails:
    post:
      tags:
        - Email Automation
      summary: Send Scheduled Email Campaigns
      description: |
        Sends scheduled email campaigns to users with their job matches.
        This endpoint is typically called by automated systems.
        
        **Rate Limit**: 1 request per minute (system endpoint)
      operationId: sendScheduledEmails
      security:
        - ApiKeyAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                campaignType:
                  type: string
                  enum: [daily, weekly, immediate]
                  default: daily
                maxUsers:
                  type: integer
                  minimum: 1
                  maximum: 1000
                  default: 100
              example:
                campaignType: daily
                maxUsers: 100
      responses:
        '200':
          description: Emails sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  emailsSent:
                    type: integer
                    example: 87
                  usersWithMatches:
                    type: integer
                    example: 76
                  usersWithoutMatches:
                    type: integer
                    example: 11
                  processingTime:
                    type: number
                    example: 12.5
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /webhook-tally:
    post:
      tags:
        - Webhooks
      summary: Tally Form Webhook
      description: |
        Receives form submissions from Tally forms for user registration.
        This is a public endpoint that processes new user signups.
        
        **Rate Limit**: 10 requests per minute
      operationId: webhookTally
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TallyWebhook'
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  userId:
                    type: string
                    example: "user_123"
                  email:
                    type: string
                    example: "user@example.com"
                  matchesFound:
                    type: integer
                    example: 12
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /dashboard:
    get:
      tags:
        - Analytics
      summary: Get Dashboard Analytics
      description: |
        Returns comprehensive analytics and metrics for the dashboard.
        Includes user statistics, job matching performance, and system health.
      operationId: getDashboard
      security:
        - BearerAuth: []
      parameters:
        - name: timeframe
          in: query
          description: Time period for analytics
          required: false
          schema:
            type: string
            enum: [1d, 7d, 30d, 90d]
            default: 7d
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user-matches:
    get:
      tags:
        - Job Matching
      summary: Get User Matches
      description: |
        Retrieves job matches for a specific user with pagination and filtering options.
      operationId: getUserMatches
      security:
        - BearerAuth: []
      parameters:
        - name: email
          in: query
          required: true
          description: User email address
          schema:
            type: string
            format: email
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          description: Number of matches per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: minScore
          in: query
          required: false
          description: Minimum match score filter
          schema:
            type: integer
            minimum: 0
            maximum: 100
            default: 50
      responses:
        '200':
          description: User matches retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobMatch'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  totalMatches:
                    type: integer
                    example: 45
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'

  /create-checkout-session:
    post:
      tags:
        - Payments
      summary: Create Stripe Checkout Session
      description: |
        Creates a Stripe checkout session for subscription payments.
        Supports both monthly and annual billing cycles.
      operationId: createCheckoutSession
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - priceId
                - successUrl
                - cancelUrl
              properties:
                priceId:
                  type: string
                  description: Stripe price ID for the subscription
                  example: "price_1234567890"
                successUrl:
                  type: string
                  format: uri
                  description: URL to redirect after successful payment
                  example: "https://jobping.ai/billing/success"
                cancelUrl:
                  type: string
                  format: uri
                  description: URL to redirect after cancelled payment
                  example: "https://jobping.ai/billing/cancel"
                customerEmail:
                  type: string
                  format: email
                  description: Customer email for the checkout session
                  example: "user@example.com"
      responses:
        '200':
          description: Checkout session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    example: "cs_1234567890"
                  url:
                    type: string
                    format: uri
                    example: "https://checkout.stripe.com/pay/cs_1234567890"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for system authentication
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for user authentication

  schemas:
    UserPreferences:
      type: object
      required:
        - email
        - career_path
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        full_name:
          type: string
          example: "John Doe"
        professional_expertise:
          type: string
          example: "Software Development"
        visa_status:
          type: string
          example: "eu-citizen"
        start_date:
          type: string
          format: date
          example: "2024-06-01"
        work_environment:
          type: string
          enum: [remote, hybrid, on-site, unclear]
          example: "hybrid"
        languages_spoken:
          type: array
          items:
            type: string
          example: ["English", "Spanish"]
        company_types:
          type: array
          items:
            type: string
          example: ["tech", "startup"]
        roles_selected:
          type: array
          items:
            type: string
          example: ["developer", "analyst"]
        career_path:
          type: array
          items:
            type: string
          example: ["tech", "data"]
        entry_level_preference:
          type: string
          enum: [entry, mid, senior]
          example: "entry"
        target_cities:
          type: array
          items:
            type: string
          example: ["Berlin", "Amsterdam"]

    JobMatch:
      type: object
      properties:
        job_index:
          type: integer
          description: Index of the job in the original array
          example: 0
        job_hash:
          type: string
          description: Unique identifier for the job
          example: "abc123def456"
        match_score:
          type: integer
          minimum: 0
          maximum: 100
          description: Overall match score
          example: 85
        match_reason:
          type: string
          description: Human-readable explanation of the match
          example: "Strong skill alignment, great location match"
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence in the match quality
          example: 0.87

    Job:
      type: object
      properties:
        job_hash:
          type: string
          example: "abc123def456"
        title:
          type: string
          example: "Junior Software Developer"
        company:
          type: string
          example: "TechCorp"
        location:
          type: string
          example: "Berlin, Germany"
        description:
          type: string
          example: "We are looking for a junior developer..."
        categories:
          type: array
          items:
            type: string
          example: ["tech", "early-career", "developer"]
        languages_required:
          type: array
          items:
            type: string
          example: ["English"]
        work_environment:
          type: string
          enum: [remote, hybrid, on-site]
          example: "hybrid"
        source:
          type: string
          example: "greenhouse"
        job_url:
          type: string
          format: uri
          example: "https://techcorp.com/jobs/123"
        posted_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    TallyWebhook:
      type: object
      properties:
        eventId:
          type: string
          example: "evt_1234567890"
        eventType:
          type: string
          example: "FORM_RESPONSE"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        formId:
          type: string
          example: "form_1234567890"
        responseId:
          type: string
          example: "resp_1234567890"
        data:
          type: object
          properties:
            fields:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    example: "email"
                  label:
                    type: string
                    example: "Email Address"
                  type:
                    type: string
                    example: "EMAIL"
                  value:
                    oneOf:
                      - type: string
                      - type: array
                        items:
                          type: string
                      - type: "null"
                    example: "user@example.com"

    DashboardData:
      type: object
      properties:
        users:
          type: object
          properties:
            total:
              type: integer
              example: 1250
            active:
              type: integer
              example: 890
            new:
              type: integer
              example: 45
        jobs:
          type: object
          properties:
            total:
              type: integer
              example: 15420
            new:
              type: integer
              example: 234
            matched:
              type: integer
              example: 5678
        matching:
          type: object
          properties:
            totalMatches:
              type: integer
              example: 12345
            aiMatches:
              type: integer
              example: 8901
            ruleBasedMatches:
              type: integer
              example: 3444
            averageScore:
              type: number
              example: 78.5
        performance:
          type: object
          properties:
            averageLatency:
              type: number
              example: 2.3
            cacheHitRate:
              type: number
              example: 0.68
            errorRate:
              type: number
              example: 0.02
        revenue:
          type: object
          properties:
            monthly:
              type: number
              example: 12500.00
            subscribers:
              type: integer
              example: 234
            conversionRate:
              type: number
              example: 0.15

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Validation failed"
        message:
          type: string
          example: "Invalid email format"
        code:
          type: string
          example: "VALIDATION_ERROR"
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        requestId:
          type: string
          example: "req_1234567890"

  responses:
    BadRequest:
      description: Bad request - invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Bad Request"
            message: "Invalid request parameters"
            code: "BAD_REQUEST"
            timestamp: "2024-01-15T10:30:00Z"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unauthorized"
            message: "Authentication required"
            code: "UNAUTHORIZED"
            timestamp: "2024-01-15T10:30:00Z"

    RateLimited:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  retryAfter:
                    type: integer
                    example: 60
          example:
            error: "Rate Limited"
            message: "Too many requests"
            code: "RATE_LIMITED"
            retryAfter: 60
            timestamp: "2024-01-15T10:30:00Z"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Internal Server Error"
            message: "An unexpected error occurred"
            code: "INTERNAL_ERROR"
            timestamp: "2024-01-15T10:30:00Z"
